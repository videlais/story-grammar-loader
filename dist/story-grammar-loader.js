!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("story-grammar")):"function"==typeof define&&define.amd?define(["story-grammar"],t):"object"==typeof exports?exports.StoryGrammarLoader=t(require("story-grammar")):e.StoryGrammarLoader=t(e["story-grammar"])}(this,e=>(()=>{"use strict";var t={585:t=>{t.exports=e}},r={};function n(e){var a=r[e];if(void 0!==a)return a.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};n.r(a),n.d(a,{JSONGrammarLoader:()=>o,KeywordRuleBuilder:()=>s,Parser:()=>i.Parser,createGrammarLoader:()=>l});var i=n(585);class o{constructor(){this.registeredFunctions=new Map,this.parser=new i.Parser,this.registerDefaultFunctions()}loadFromJSON(e){try{const t=JSON.parse(e);this.loadFromConfig(t)}catch(e){throw new Error(`Failed to parse JSON: ${e instanceof Error?e.message:"Unknown error"}`)}}loadFromConfig(e){e.settings&&(void 0!==e.settings.maxDepth&&this.parser.setMaxDepth(e.settings.maxDepth),void 0!==e.settings.randomSeed&&this.parser.setRandomSeed(e.settings.randomSeed)),e.modifiers&&this.loadModifiers(e.modifiers);for(const[t,r]of Object.entries(e.rules))this.loadRule(t,r)}loadRule(e,t){switch(t.type){case"static":this.loadStaticRule(e,t);break;case"function":this.loadFunctionRule(e,t);break;case"weighted":this.loadWeightedRule(e,t);break;case"conditional":this.loadConditionalRule(e,t);break;case"sequential":this.loadSequentialRule(e,t);break;case"range":this.loadRangeRule(e,t);break;case"template":this.loadTemplateRule(e,t);break;default:throw new Error(`Unknown rule type: ${t.type}`)}}loadStaticRule(e,t){this.parser.addRule(e,t.values)}loadFunctionRule(e,t){const r=this.registeredFunctions.get(t.functionName);if(!r)throw new Error(`Unknown function: ${t.functionName}`);this.parser.addFunctionRule(e,()=>r.handler(t.parameters||{}))}loadWeightedRule(e,t){this.parser.addWeightedRule(e,t.values,t.weights)}loadConditionalRule(e,t){const r=t.conditions.map(e=>{if("default"in e&&e.default)return{default:e.default};if("if"in e&&"then"in e&&e.if&&e.then)return{if:this.createConditionFunction(e.if),then:e.then};throw new Error("Invalid condition format")});this.parser.addConditionalRule(e,{conditions:r})}loadSequentialRule(e,t){this.parser.addSequentialRule(e,t.values,{cycle:!1!==t.cycle})}loadRangeRule(e,t){this.parser.addRangeRule(e,{min:t.min,max:t.max,step:t.step,type:t.numberType})}loadTemplateRule(e,t){this.parser.addTemplateRule(e,{template:t.template,variables:t.variables})}createConditionFunction(e){return t=>{try{let r=e;return r=r.replace(/context\.(\w+)/g,(e,t)=>`context['${t}']`),new Function("context",`return ${r}`)(t)}catch{return!1}}}loadModifiers(e){e.length}registerFunction(e){this.registeredFunctions.set(e.name,e)}registerDefaultFunctions(){this.registerFunction({name:"randomNumber",description:"Generate a random number within specified range",handler:(e={})=>{const t=e.min||1,r=e.max||100;return[(Math.floor(Math.random()*(r-t+1))+t).toString()]}}),this.registerFunction({name:"diceRoll",description:"Roll dice (e.g., d6, d20)",handler:(e={})=>{const t=e.sides||6,r=e.count||1;let n=0;for(let e=0;e<r;e++)n+=Math.floor(Math.random()*t)+1;return[n.toString()]}}),this.registerFunction({name:"currentTime",description:"Get current time in various formats",handler:(e={})=>{const t=new Date;switch(e.format||"time"){case"time":default:return[t.toLocaleTimeString()];case"date":return[t.toLocaleDateString()];case"datetime":return[t.toLocaleString()]}}}),this.registerFunction({name:"randomChoice",description:"Choose random item from provided array",handler:(e={})=>{const t=e.choices||["option1","option2","option3"];return[t[Math.floor(Math.random()*t.length)]]}})}getParser(){return this.parser}parse(e,t=!1){return this.parser.parse(e,t)}getRegisteredFunctions(){return Array.from(this.registeredFunctions.keys())}validate(){return this.parser.validate()}clear(){this.parser.clearAll()}}class s{constructor(e){this.loader=e}createConditionalRule(e,t){const r={type:"conditional",conditions:[{if:t.if,then:t.then}]};t.else&&r.conditions.push({default:t.else}),this.loader.loadFromConfig({rules:{[e]:r}})}createWeightedRule(e,t){const r={type:"weighted",values:t.values,weights:t.weights};this.loader.loadFromConfig({rules:{[e]:r}})}createRangeRule(e,t){const r={type:"range",min:t.min,max:t.max,step:t.step,numberType:t.type||"integer"};this.loader.loadFromConfig({rules:{[e]:r}})}createTemplateRule(e,t){const r={type:"template",template:t.template,variables:t.variables};this.loader.loadFromConfig({rules:{[e]:r}})}createSequentialRule(e,t){const r={type:"sequential",values:t.sequence,cycle:t.cycle};this.loader.loadFromConfig({rules:{[e]:r}})}createFunctionRule(e,t){const r={type:"function",functionName:t.function,parameters:t.parameters};this.loader.loadFromConfig({rules:{[e]:r}})}loadKeywordConfig(e){const t={rules:{},modifiers:e.modifiers,settings:e.settings};for(const[r,n]of Object.entries(e.rules))t.rules[r]=this.convertKeywordRule(n);this.loader.loadFromConfig(t)}convertKeywordRule(e){if(Array.isArray(e))return{type:"static",values:e};const t=e;if("if"in t&&"then"in t&&t.if&&t.then){const e=[{if:t.if,then:t.then}];return"else"in t&&t.else&&e.push({default:t.else}),{type:"conditional",conditions:e}}if("values"in t&&"weights"in t&&t.values&&t.weights)return{type:"weighted",values:t.values,weights:t.weights};if("min"in t&&"max"in t&&"number"==typeof t.min&&"number"==typeof t.max)return{type:"range",min:t.min,max:t.max,step:t.step,numberType:t.type||"integer"};if("template"in t&&"variables"in t&&t.template&&t.variables)return{type:"template",template:t.template,variables:t.variables};if("sequence"in t&&t.sequence)return{type:"sequential",values:t.sequence,cycle:t.cycle};if("function"in t&&t.function)return{type:"function",functionName:t.function,parameters:t.parameters};throw new Error("Unable to determine rule type from keywords")}}function l(){const e=new o;return{loader:e,builder:new s(e)}}return a})());